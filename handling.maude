mod DCA2MC-HANDLING is
    pr DCA2MC-PROCESSING .
    pr DCA2MC-PARSING .
    pr DCA2MC-IO .

    vars N N' SEED SEED' : Nat .
    vars Atts : AttributeSet .
    vars DB DB' : Database .
    vars T T' T1 T2 : Term .
    vars SFS SFS' : SFSet .
    vars Ty : ResultType .
    vars X@Class : Cid .
    vars QIL : QidList .
    vars O : Oid .
    
    --- handle uninitialize database
    op isValidCmd : Term -> Bool .
    eq isValidCmd('check_[T]) = true .
    eq isValidCmd('layerCheck_[T]) = true .
    eq isValidCmd('lastCheck.@Command@) = true .
    eq isValidCmd('set-cores_[T]) = true .
    eq isValidCmd('select_[T]) = true .
    eq isValidCmd('analyze.@Command@) = true .
    eq isValidCmd('quit.@Command@) = true .
    eq isValidCmd('help.@Command@) = true .
    --- eq isValidCmd('set-checker_[T]) = true .
    eq isValidCmd(T) = false [owise] .

    crl < O : X@Class |
            db: DB,
            input: T,
            state: execComm,
            Atts >
    =>  < O : X@Class |
            db: DB,
            input: (empty),
            state: print,
            Atts >
        write(stdout, O, printTokens('\r 'Error: '\o 'cannot 'find 'initialization. '\n))
    if isValidCmd(T) /\ isEmptyDB(DB) .

    --- initialize command
    crl [initialize] :
        < O : X@Class |
            db: DB,
            input: ('initialize`[_`,_`,_`][T, T1, T2]),
            state: execComm,
            cores: 0,
            Atts >
    =>  < O : X@Class |
            db: DB',
            input: empty,
            state: print,
            cores: 0,
            Atts >
        write(stdout, O, printTokens(QIL))
    if << DB' ; QIL >> := procInitializeCommand('initialize`[_`,_`,_`][T, T1, T2], DB) .

    --- layerCheck command
    crl [layerCheck] :
        < O : X@Class |
            db: DB,
            input: ('layerCheck_[T]),
            state: execComm,
            cores: 0,
            Atts >
    =>  < O : X@Class |
            db: DB',
            input: empty,
            state: (if Ty == unstatisfied or-else Ty == satisfied then quit else print fi),
            cores: 0,
            Atts >
        write(stdout, O, printTokens(QIL))
    if not isEmptyDB(DB)
    /\ << DB' ; QIL >> := procLayerCheckCommand('layerCheck_[T], DB)
    /\ Ty := getResult(DB') .

    --- lastCheck command
    crl [lastCheck] :
        < O : X@Class |
            db: DB,
            input: ('lastCheck.@Command@),
            state: execComm,
            cores: 0,
            checker: 'maude,
            Atts >
    =>  < O : X@Class |
            db: DB',
            input: empty,
            state: print,
            cores: 0,
            checker: 'maude,
            Atts >
        write(stdout, O, printTokens(QIL))
    if not isEmptyDB(DB)
    /\ << DB' ; QIL >> := procLastCheckCommand('lastCheck.@Command@, DB) .

    --- check command
    crl [check] :
        < O : X@Class |
            db: DB,
            input: ('check_[T]),
            state: execComm,
            cores: 0,
            Atts >
    =>  < O : X@Class |
            db: DB',
            input: empty,
            state: (if Ty == unstatisfied or-else Ty == satisfied then quit else print fi),
            cores: 0,
            Atts >
        write(stdout, O, printTokens(QIL))
    if not isEmptyDB(DB)
    /\ << DB' ; QIL >> := procCheckCommand('check_[T], DB)
    /\ Ty := getResult(DB') .

    --- analyze command
    crl [analyze] :
        < O : X@Class |
            db: DB,
            input: ('analyze.@Command@),
            state: execComm,
            Atts >
    =>  < O : X@Class |
            db: DB,
            input: empty,
            state: print,
            Atts >
        write(stdout, O, printTokens(QIL))
    if not isEmptyDB(DB)
    /\ QIL := procAnalyzeCommand('analyze.@Command@, DB) .

    --- select command
    crl [select] :
        < O : X@Class |
            db: DB,
            input: ('select_[T]),
            state: execComm,
            seed: SEED,
            Atts >
    =>  < O : X@Class |
            db: evalDB(DB, (sfSet: SFS')),
            input: empty,
            state: print,
            seed: SEED',
            Atts >
        write(stdout, O, printTokens('\b 'Select: '\s '\o 'success 'with qid(N') 'items 'and 'current 'seed qid(SEED') '\n))
    if not isEmptyDB(DB)
    /\ T' := getTerm(
                metaParse(
                    upModule('NAT, false),
                    downQidList(solveBubbleAndToken(T)),
                    'Nat
                )
            )
    /\ N := downTerm(T', 0)
    /\ SFS := getSfSet(DB)
    /\ < SFS' : SEED' >  := selectSFS(SFS, N, SEED) 
    /\ N' := | SFS' | .

    --- set-seed command
    crl [setSeed] :
        < O : X@Class |
            input: ('set-seed_[T]),
            state: execComm,
            seed: SEED,
            Atts >
    =>  < O : X@Class |
            input: empty,
            state: print,
            seed: SEED',
            Atts >
            write(stdout, O, printTokens('\b 'Set 'seed: '\s '\o 'success 'to qid(SEED') '\n))
    if T' := getTerm(
                metaParse(
                    upModule('NAT, false),
                    downQidList(solveBubbleAndToken(T)),
                    'Nat
                )
            )
    /\ SEED' := downTerm(T', 0) .
endm