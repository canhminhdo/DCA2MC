mod DCA2MC-HANDLING is
    pr DCA2MC-PROCESSING .
    pr DCA2MC-PARSING .
    pr DCA2MC-IO .

    vars T T1 T2 T3 T4 T5 T' : Term .
    vars ME ME' : ModuleExpression .
    var Atts : AttributeSet .
    vars DB DB' : Database .
    vars Ty : ResultType .
    var X@Class : Cid .
    var QIL : QidList .
    vars O : Oid .
    
    crl [initialize] :
        < O : X@Class |
            db: DB,
            input: ('initialize`[_`,_`,_`][T, T1, T2]),
            state: execComm,
            Atts >
    =>  < O : X@Class |
            db: DB',
            input: empty,
            state: print,
            Atts >
        write(stdout, O, printTokens(QIL))
    if << DB' ; QIL >> := procInitializeCommand('initialize`[_`,_`,_`][T, T1, T2], DB) .

    crl [layerCheck] :
        < O : X@Class |
            db: DB,
            input: ('layerCheck_[T]),
            state: execComm,
            Atts >
    =>  < O : X@Class |
            db: DB',
            input: empty,
            state: (if Ty == unstatisfied or-else Ty == satisfied then quit else print fi),
            Atts >
        write(stdout, O, printTokens(QIL))
    if << DB' ; QIL >> := procLayerCheckCommand('layerCheck_[T], DB) 
    /\ Ty := getResult(DB') .

    crl [lastCheck] :
        < O : X@Class |
            db: DB,
            input: ('lastCheck.@Command@),
            state: execComm,
            Atts >
    =>  < O : X@Class |
            db: DB',
            input: empty,
            state: print,
            Atts >
        write(stdout, O, printTokens(QIL))
    if << DB' ; QIL >> := procLastCheckCommand('lastCheck.@Command@, DB) .

    crl [analyze] :
        < O : X@Class |
            db: DB,
            input: ('analyze.@Command@),
            state: execComm,
            Atts >
    =>  < O : X@Class |
            db: DB,
            input: empty,
            state: print,
            Atts >
        write(stdout, O, printTokens(QIL))
    if QIL := procAnalyzeCommand('analyze.@Command@, DB) .
endm