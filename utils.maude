fmod IQUEUE{X :: TRIV} is
    protecting BOOL .
    pr NAT .

    sort NeQueue{X} Queue{X} .
    subsort X$Elt < NeQueue{X} < Queue{X} .

    op emptyq :                       -> Queue{X}   [ctor] .
    op _|_    : Queue{X} Queue{X}     -> Queue{X}   [ctor assoc id: emptyq] .
    op _|_    : NeQueue{X} Queue{X}   -> NeQueue{X} [ctor ditto] .
    op _|_    : NeQueue{X} NeQueue{X} -> NeQueue{X} [ctor ditto] .

    var Q : Queue{X} .
    var E : X$Elt .

    op isEmpty : Queue{X} -> Bool .
    eq isEmpty(emptyq) = true .
    eq isEmpty(E | Q) = false .

    op qtop : NeQueue{X} -> X$Elt .
    eq qtop(E | Q) = E .

    op qsize : Queue{X} -> Nat .
    eq qsize(emptyq) = 0 .
    eq qsize(E | Q) = qsize(Q) + 1 .
endfm

view Worker from TRIV to CONFIGURATION is
    sort Elt to Oid .
endv

view TermList from TRIV to META-TERM is 
    sort Elt to TermList .
endv

fmod TERM-LIST-LIST is
    pr META-LEVEL .

    sorts NeTermListList TermListList .
    subsort TermList < NeTermListList < TermListList .

    op nilTLL :                             -> TermListList   [ctor] .
    op _||_   : TermListList   TermListList -> TermListList   [ctor assoc id: nilTLL] .
    op _||_   : NeTermListList TermListList -> NeTermListList [ctor ditto] .
endfm

fmod DCA2MC-UTILS is
    pr TERM-LIST-LIST .
    pr FM-TERMSET .
    pr EXT-BOOL .

    sort Bool? .
    subsort Bool < Bool? .

    op unknown : -> Bool? [ctor] .
    eq not unknown = unknown .

    vars RT : ResultTriple .
    vars OPDS : OpDeclSet .
    vars T T' VAR : Term .
    vars TyL : TypeList .
    vars TL : TermList .
    vars Ct : Constant .
    vars AS : AttrSet .
    vars TS : TermSet .
    vars M : Module .
    vars B? : Bool? .
    vars Ty : Type .
    vars QI : Qid .
    vars N : Nat .
    vars NL : NatList .

    --- sum of a nat list
    op sum : NatList -> Nat .
    eq sum(N NL) = N + sum(NL) .
    eq sum(nil) = 0 .

    --- size of term set
    op size : TermSet -> Nat .
    eq size(T | TS) = size(TS) + 1 .
    eq size(emptyTermSet) = 0 .
    
    --- extract type of a given qid
    op extractType : Module Qid    -> Type? .
    op extractType : OpDeclSet Qid -> Type? .
    eq extractType(M, QI) = extractType(getOps(M), QI) .
    eq extractType((op QI : TyL -> Ty [ AS ] .) OPDS, QI) = Ty .
    eq extractType(OPDS, QI) = anyType [owise] .

    --- check a valid module
    op isModule : Qid -> Bool .
    eq isModule(QI) = upModule(QI, false) :: Module .

    --- build term from qit and its type
    op buildTerm : Qid Type -> Term .
    eq buildTerm(QI, Ty) = qid(string(QI) + "." + string(Ty)) .

    --- extract atomic propositions
    op extractAtoms : Term -> TermSet .
    eq extractAtoms(QI[TL]) = extractAtoms(TL) .
    ceq extractAtoms((T, TL)) = extractAtoms(T) | extractAtoms(TL) if TL =/= empty .
    eq extractAtoms(Ct) = if getType(Ct) == 'Prop then Ct else emptyTermSet fi .
    eq extractAtoms(empty) = emptyTermSet .

    --- getVarTerm
    op getVarTerm : Type -> Term .
    eq getVarTerm(Ty) = qid("VAR-" + string(Ty) + ":" + string(Ty)) .

    --- generate state sequences
    op genSeqs   : Module Term Term Nat                  -> TermListList .
    op genSeqs*  : Module Term Term Nat TermList         -> TermListList .
    op genSeqs** : Module Term Term Nat TermList TermSet -> TermListList .
    
    eq genSeqs(M, T, VAR, N) = genSeqs*(M, T, VAR, N, T) .
    ceq genSeqs*(M, T, VAR, N, TL) = if TS == emptyTermSet then TL
                                     else genSeqs**(M, T, VAR, N, TL, TS) fi
    if N > 0
    /\ TS := getAllSuccessors(M, T, VAR) .
    eq genSeqs*(M, T, VAR, 0, TL) = TL .

    --- precondition: N > 0
    eq genSeqs**(M, T, VAR, N, TL, (T' | TS)) = genSeqs*(M, T', VAR, sd(N, 1), (TL , T')) || genSeqs**(M, T, VAR, N, TL, TS) .
    eq genSeqs**(M, T, VAR, N, TL, emptyTermSet) = nilTLL .

    --- get all successors states
    op getAllSuccessors  : Module Term Term                   -> TermSet .
    op getAllSuccessors* : Module Term Term Nat ResultTriple? -> TermSet .
    eq getAllSuccessors(M, T, VAR) = getAllSuccessors*(
        M, T, VAR, 0,
        metaSearch(M, T, VAR, nil, '+, 1, 0)
    ) .

    eq getAllSuccessors*(M, T, VAR, N, failure) = emptyTermSet .
    eq getAllSuccessors*(M, T, VAR, N, RT) = getTerm(RT) | getAllSuccessors*(
        M, T, VAR, N + 1,
        metaSearch(M, T, VAR, nil, '+, 1, N + 1)
    ) .

    --- check satisfiablity
    op checkSat       : Module Term Term -> Bool? .
    op checkSatResult : Term             -> Bool? .
    eq checkSat(M, T, Ct) = checkSatResult(getTerm(metaReduce(M, '_|=_[T, Ct]))) .
    eq checkSatResult('false.Bool) = false .
    eq checkSatResult('true.Bool) = true .
    eq checkSatResult(T) = unknown [owise] .
    eq checkSat(M, T, '~_[Ct]) = not checkSat(M, T, Ct) .
endfm