fmod DCA2MC-BANNER is
    pr LEXICAL .

    op banner : -> String .
    eq banner = 
        "\n\n\t\t A Scalable Divide & Conquer Approach to Model Checking Linear Temporal Properties\n" +
        "\t\t DCA2MC Version 1.0 (Feb 18 2025)\n" +
        "\t\t Copyright(c) 2025, Ogata Laboratory - JAIST\n" +
        "\t\t All rights reserved. \n" +
        "\n Commands:" + 
        "\n     initialize[_,_,_] \t initializes the application with a system module ID, an initial state, and an LT formula for model checking as inputs" +
        "\n     set-checker _ \t use an external model checker _ (e.g., spin)" +
        "\n     set-cores _ \t uses parallelization with a nonzero number of cores for the default model checker _ (e.g., 8)" +
        "\n     set-checker-cores _ \t uses parallelization with a nonzero number of cores _ for the external model checker (e.g., 8)" +
        "\n     layerCheck _ \t generates states and their formulas with a layer configuration _ (e.g., 2 2)" +
        "\n     lastCheck \t\t model checks for the final layer" +
        "\n     check _ \t\t generates states and their formulas with a layer configuration _ and model checks for the final layer" +
        "\n     analyze \t\t shows some information from the current application for debugging" +
        "\n     help \t\t shows the command instructions" +
        "\n     quit \t\t exits the application\n\n" .
endfm

mod DCA2MC-IO is
    pr DCA2MC-GRAMMAR .
    pr DCA2MC-BANNER .
    pr STD-STREAM .
    pr META-LEVEL .
    pr DATABASE .
    pr IQUEUE{Worker} .
    pr SEQUENCE .

    vars Atts : AttributeSet .
    vars RP? : ResultPair? .
    vars X@Class : Cid .
    vars S : String .
    vars O : Oid .

    sort State .

    --- state of the application
    op init     : -> State [ctor] .
    op wait     : -> State [ctor] .
    op print    : -> State [ctor] .
    op idle     : -> State [ctor] .
    op quit     : -> State [ctor] .
    op done     : -> State [ctor] .
    op cleanup  : -> State [ctor] .
    op execComm : -> State [ctor] .
    --- for parallelization
    op initMI         : -> State [ctor] .
    op working        : -> State [ctor] .
    op waiting        : -> State [ctor] .
    op checking       : -> State [ctor] .
    op terminating1   : -> State [ctor] .
    op terminating2   : -> State [ctor] .
    op print&checking : -> State [ctor] .
    --- for external model checker
    op initChecker          : -> State [ctor] .
    op waitChecker          : -> State [ctor] .
    op closeListener        : -> State [ctor] .
    op closeCheckers        : -> State [ctor] .
    
    --- attributes
    op db:_    : Database -> Attribute [ctor] .
    op state:_ : State    -> Attribute [ctor] .
    op input:_ : TermList -> Attribute [ctor] .
    --- for parallelization
    op cores:_      : Nat           -> Attribute [ctor] .
    op workers:_    : Queue{Worker} -> Attribute [ctor] .
    op loading[_]:_ : Oid Bool      -> Attribute [ctor] .
    op pending[_]:_ : Oid Seq       -> Attribute [ctor] .
    op jobs:_       : SFSet         -> Attribute [ctor] .
    op res:_        : ResultType    -> Attribute [ctor] .
    op depth:_      : Nat           -> Attribute [ctor] .
    --- for external model checkers
    op checker:_        : Qid           -> Attribute [ctor] .
    op checker-cores:_  : Nat           -> Attribute [ctor] .
    op exWorkers:_      : Queue{Worker} -> Attribute [ctor] .
    op listener:_       : Oid           -> Attribute [ctor] .
    op port:_           : Nat           -> Attribute [ctor] .

    rl [init] :
       < O : X@Class | state: init, Atts >
    => < O : X@Class | state: print, Atts >
        write(stdout, O, banner) .
    
    rl [print] :
        < O : X@Class | state: print, Atts > wrote(O, stdout)
    =>  < O : X@Class | state: idle, Atts > .

    rl [print&checking] :
        < O : X@Class | state: print&checking, Atts > wrote(O, stdout)
    =>  < O : X@Class | state: checking, Atts > .

    rl [input] :
        < O : X@Class | state: idle, Atts >
     => < O : X@Class | state: wait, Atts >
        getLine(stdin, O, "DCA2MC> ") .

    crl [parseComm] :
        < O : X@Class | state: wait, input: empty, Atts >
        gotLine(O, stdin, S)
    =>  if RP? :: ResultPair then
            < O : X@Class | state: execComm, input: getTerm(RP?), Atts >
        else
            < O : X@Class | state: print, input: empty, Atts >
            write(stdout, O, "Cannot parse the command\n")
        fi
    if RP? := metaParse(DCA2MC-GRAMMAR, tokenize(S), '@Input@) .

    rl [help] :
        < O : X@Class |
            input: ('help.@Command@),
            state: execComm,
            Atts >
    =>  < O : X@Class |
            input: empty,
            state: print,
            Atts >
        write(stdout, O, banner) .

    rl [quit] :
        < O : X@Class | state: execComm, input: 'quit.@Command@, Atts >
    =>  < O : X@Class | state: quit, input: empty, Atts > .

    rl [cleanup] :
        < O : X@Class | state: cleanup, Atts >
    =>  < O : X@Class | state: done > .
    --- =>  < O : X@Class | state: done, Atts > .

    rl [end] : < O : X@Class | state: done, Atts > wrote(O, stdout)
    => < O : X@Class | state: done > .
endm