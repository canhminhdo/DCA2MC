fmod FORMULA is
    pr META-LEVEL .

    vars T T1 T2 : Term .
    vars TL : TermList .
    vars Ct : Constant .
    vars QI : Qid .

    op len : Term -> Nat .
    eq len(QI[T]) = len(T) + 1 .
    eq len(QI[T1, T2]) = len(T1) + len(T2) + 1 .
    eq len(Ct) = 1 .

    op isLiteral : Term -> Bool .
    eq isLiteral(Ct) = true .
    eq isLiteral('~_[Ct]) = true .
    eq isLiteral(T) = false [owise] .

    op isNextF : Term -> Bool .
    eq isNextF('O_[TL]) = true .
    eq isNextF(T) = false [owise] .

    op isAlphaF : Term -> Bool .
    eq isAlphaF('_/\_[TL]) = true .
    eq isAlphaF(T) = false [owise] .

    op isBetaF : Term -> Bool . 
    eq isBetaF('_\/_[TL]) = true .
    eq isBetaF(T) = false [owise] .
endfm

fmod NAT-SET is
  protecting SET{Nat} * (sort NeSet{Nat} to NeNatSet, sort Set{Nat} to NatSet) .
endfm

fmod NODE is
    pr FM-TERMSET .
    pr FORMULA . 
    pr NAT-SET .
    
    sorts Node Entry NodeType .

    vars TS TS' : TermSet .
    vars T T1 T2 : Term .
    vars Ty : NodeType .
    vars Ct : Constant .
    vars NS : NatSet .
    vars Nd : Node .
    vars ID : Nat .

    ops empty closed open state ordinary : -> NodeType [ctor] .
    
    --- data structure for a node
    op `{_`} : TermSet -> Node .
    --- simplifying the set of formulas
    ceq { 'False.FalseFormula | TS } = { 'False.FalseFormula } if TS =/= emptyTermSet .
    ceq { 'True.TrueFormula | TS } = { TS } if TS =/= emptyTermSet .
    eq { T | ('~_[T]) | TS } = { 'False.FalseFormula } .

    --- data structure for an entry reprenting a node
    op {node:_, type:_, childs:_} : Node NodeType NatSet -> Entry .
    
    --- get information from an entry
    op getType : Entry -> NodeType .
    eq getType({node: Nd, type: Ty, childs: NS}) = Ty .

    op getNode : Entry -> Node .
    eq getNode({node: Nd, type: Ty, childs: NS}) = Nd .

    op getChilds : Entry -> NatSet .
    eq getChilds({node: Nd, type: Ty, childs: NS}) = NS .

    --- add a node id as a child of a node reprenting by an entry
    op addLeaf : Entry Nat -> Entry .
    eq addLeaf({node: Nd, type: Ty, childs: NS}, ID) = {node: Nd, type: Ty, childs: insert(ID, NS)} .

    --- get information from a node
    op getNodeType : Node    -> NodeType .
    op getNodeType : TermSet -> NodeType .
    
    eq getNodeType({ TS }) = getNodeType(TS) .
    eq getNodeType(TS) = 
        if hasOnlyLiterals(TS) then
            if hasCompPair(TS) then closed
            else open fi
        else
            if hasOnlyLiterals&Next(TS) then state
            else ordinary fi
        fi .

    --- has only literals and next formulas?
    op hasOnlyLiterals&Next : TermSet -> Bool .
    eq hasOnlyLiterals&Next(T | TS) = if (isLiteral(T) or isNextF(T))
                                      then hasOnlyLiterals&Next(TS)
                                      else false
                                      fi .
    eq hasOnlyLiterals&Next(emptyTermSet) = true .

    --- has only literals?
    op hasOnlyLiterals : TermSet -> Bool .
    eq hasOnlyLiterals(T | TS) = if isLiteral(T) then hasOnlyLiterals(TS) else false fi .
    eq hasOnlyLiterals(emptyTermSet) = true .

    --- has a complementary pair of literals ?
    op hasCompPair : TermSet -> Bool .
    eq hasCompPair(Ct | ('~_[Ct]) | TS) = true .
    eq hasCompPair(('False.FalseFormula) | TS) = true .
    eq hasCompPair(TS) = false [owise] .

    --- get all literals from a node
    op literals : Node -> TermSet [memo] .
    eq literals({ T | TS }) = if isLiteral(T) then T | literals({ TS })  else literals({ TS }) fi .
    eq literals({ emptyTermSet }) = emptyTermSet .

    --- get all formulas from the next formulas in a node by removing the preceeding next operator
    op next  : Node    -> Node [memo] .
    op next* : TermSet -> TermSet .
    eq next({ TS }) = { next*(TS) } .
    eq next*(T | TS) = if isNextF(T) then rmNextOperator(T) | next*(TS) else next*(TS) fi .
    eq next*(emptyTermSet) = emptyTermSet .

    op rmNextOperator : Term -> Term .
    eq rmNextOperator('O_[T]) = T .
endfm

view Node from TRIV to NODE is
    sort Elt to Node .
endv

view Entry from TRIV to NODE is
    sort Elt to Entry .
endv

fmod NODE-TO-ID is
    pr MAP{Node,Nat} * ( sort Map{Node,Nat} to NodeToId ) .
endfm

fmod ID-TO-NODE is
    pr MAP{Nat,Entry} * ( sort Map{Nat,Entry} to IdToNode ) .
endfm

fmod NODE-SET is
    protecting SET{Node} * (sort NeSet{Node} to NeNodeSet, sort Set{Node} to NodeSet) .
    
    vars TS TS' : TermSet .
    vars NS : NodeSet .

    --- eq ({ TS }, {TS | TS'}) = { TS } . --- too general ???
    op simplifyNodes : NodeSet -> NodeSet .
    eq simplifyNodes(({ TS }, {TS | TS'}, NS)) = simplifyNodes(({ TS }, NS)) .
    eq simplifyNodes(NS) = NS [owise] .
endfm

view NodeSet from TRIV to NODE-SET is
    sort Elt to NodeSet .
endv

view Term from TRIV to META-TERM is
    sort Elt to Term .
endv

fmod TABLEAU is
    pr NODE-TO-ID .
    pr ID-TO-NODE .
    pr NODE-SET .

    sort Tableau .

    vars ID2N ID2N' ID2N'' : IdToNode .
    vars TB TB' TB'' : Tableau .
    vars NS NS' NS'' : NodeSet .
    vars N2ID N2ID' : NodeToId .
    vars N ID ID' ID'' : Nat .
    vars Nd Nd' Nd'' : Node .
    vars NtS NtS' : NatSet .
    vars T T1 T2 : Term .
    vars Ty : NodeType .
    vars TS : TermSet .
    vars ET : Entry .

    --- data structure for a tableau
    op `{cnt:_,node2id:_,id2node:_`} : Nat NodeToId IdToNode -> Tableau .

    --- get information from a tableau
    op size : Tableau -> Nat .
    eq size({cnt: N, node2id: N2ID, id2node: ID2N}) = N .

    op getInitNode : Tableau -> Node .
    eq getInitNode({cnt: N, node2id: N2ID, id2node: ID2N}) = getNode(ID2N[0]) .

    op getChildNodes : Tableau NatSet -> NodeSet .
    ceq getChildNodes(TB, (ID, NtS)) = getNode(ID2N[ID]), getChildNodes(TB, NtS) 
    if {cnt: N, node2id: N2ID, id2node: ID2N} := TB .
    eq getChildNodes(TB, empty) = empty .
    
    --- find leaves by nodes, returning a node set
    op leaves : Tableau NodeSet -> NodeSet [memo] .
    ceq leaves(TB, (Nd, NS)) 
    =  if (Ty == closed or Ty == open or Ty == state) then (Nd, leaves(TB, NS)) else 
            leaves(TB, (NS, getChildNodes(TB, NtS)))
        fi
    if {cnt: N, node2id: N2ID, id2node: ID2N} := TB
    /\ ID := N2ID[Nd]
    /\ ET := ID2N[ID]
    /\ Ty := getType(ET) 
    /\ NtS := getChilds(ET) .
    eq leaves(TB, empty) = empty .
    
    --- find leaves by nodes, returning a nat set
    op leaves* : Tableau NodeSet -> NatSet [memo] .
    ceq leaves*(TB, (Nd, NS)) 
    =  if (Ty == closed or Ty == open or Ty == state) then (ID, leaves*(TB, NS)) else 
            leaves*(TB, (NS, getChildNodes(TB, NtS)))
        fi
    if {cnt: N, node2id: N2ID, id2node: ID2N} := TB
    /\ ID := N2ID[Nd]
    /\ ET := ID2N[ID]
    /\ Ty := getType(ET) 
    /\ NtS := getChilds(ET) .
    eq leaves*(TB, empty) = empty .

    --- find leaves by ids, returning a node set
    op leavesByIds : Tableau NatSet -> NodeSet [memo] .
    ceq leavesByIds(TB, (ID, NtS)) 
    =  if (Ty == closed or Ty == open or Ty == state) then (getNode(ET), leavesByIds(TB, NtS)) else 
            leavesByIds(TB, (NtS, NtS'))
        fi
    if {cnt: N, node2id: N2ID, id2node: ID2N} := TB
    /\ ET := ID2N[ID]
    /\ Ty := getType(ET) 
    /\ NtS' := getChilds(ET) .
    eq leavesByIds(TB, empty) = empty .
    
    --- find leaves by ids, returning a nat set
    op leavesByIds* : Tableau NatSet -> NatSet [memo] .
    ceq leavesByIds*(TB, (ID, NtS)) 
    =  if (Ty == closed or Ty == open or Ty == state) then (ID, leavesByIds*(TB, NtS)) else 
            leavesByIds*(TB, (NtS, NtS'))
        fi
    if {cnt: N, node2id: N2ID, id2node: ID2N} := TB
    /\ ET := ID2N[ID]
    /\ Ty := getType(ET) 
    /\ NtS' := getChilds(ET) .
    eq leavesByIds*(TB, empty) = empty .

    --- build a tableau for a given formula
    op buildTableau : Term -> Tableau .
    eq buildTableau(T) = buildTableau(
        { T }, 
        {cnt: 1, node2id: ({ T } |-> 0), id2node: (0 |-> { node: { T }, type: getNodeType(T), childs: (empty) })}
    ) .
    
    --- build a tableau for a node set
    op buildTableau : NodeSet Tableau -> Tableau .
    eq buildTableau((Nd, NS), TB) = buildTableau*(Nd, NS, TB) .
    eq buildTableau(empty, TB) = TB .

    op buildTableau* : Node NodeSet Tableau -> Tableau .
    ceq buildTableau*(Nd, NS, TB) = 
        if Ty == closed or Ty == open then
            buildTableau(NS, TB)
        else
            if Ty == ordinary then
                handleAlphaF(Nd, NS, TB)
            else
                handleStateNode(Nd, NS, TB)
            fi
        fi
    if {cnt: N, node2id: N2ID, id2node: ID2N} := TB
    /\ Ty := getType(ID2N[N2ID[Nd]]) .

    --- handle alpha formulas in a node
    op handleAlphaF : Node NodeSet Tableau -> Tableau .
    ceq handleAlphaF({ ('_/\_[T1, T2]) | TS }, NS, TB) = 
        buildTableau(union(NS', NS), TB')
    if Nd := { ('_/\_[T1, T2]) | TS }
    /\ Nd' := { T1 | T2 | TS } 
    /\ TB' := addNode(Nd, Nd', TB)
    /\ NS' := (if size(TB) == size(TB') then empty else Nd' fi) .
    eq handleAlphaF(Nd, NS, TB) = handleBetaF(Nd, NS, TB) [owise] .

    --- handle beta formulas in a node
    op handleBetaF : Node NodeSet Tableau -> Tableau .
    ceq handleAlphaF({ ('_\/_[T1, T2]) | TS }, NS, TB) = 
        buildTableau(union(NS'', union(NS', NS)), TB'')
    if Nd := { ('_\/_[T1, T2]) | TS }
    /\ Nd' := { T1 | TS }
    /\ Nd'' := { T2 | TS } 
    /\ TB' := addNode(Nd, Nd', TB)
    /\ TB'' := addNode(Nd, Nd'', TB')
    /\ NS' := (if size(TB) == size(TB') then empty else Nd' fi)
    /\ NS'' := (if size(TB') == size(TB'') then empty else Nd'' fi) .
    eq handleBetaF(Nd, NS, TB) = handleNextF(Nd, NS, TB) [owise] .

    --- handle next formulas in a node
    op handleNextF : Node NodeSet Tableau -> Tableau .
    ceq handleNextF({ ('_U_[T1, T2]) | TS }, NS, TB) = 
        buildTableau(union(NS'', union(NS', NS)), TB'')
    if Nd := { ('_U_[T1, T2]) | TS }
    /\ Nd' := { T2 | TS }
    /\ Nd'' := { T1 | ('O_['_U_[T1, T2]]) | TS } 
    /\ TB' := addNode(Nd, Nd', TB)
    /\ TB'' := addNode(Nd, Nd'', TB')
    /\ NS' := (if size(TB) == size(TB') then empty else Nd' fi)
    /\ NS'' := (if size(TB') == size(TB'') then empty else Nd'' fi) .

    ceq handleNextF({ ('_R_[T1, T2]) | TS }, NS, TB) = 
        buildTableau(union(NS'', union(NS', NS)), TB'')
    if Nd := { ('_R_[T1, T2]) | TS }
    /\ Nd' := { T1 | T2 | TS }
    /\ Nd'' := { T2 | ('O_['_R_[T1, T2]]) | TS } 
    /\ TB' := addNode(Nd, Nd', TB)
    /\ TB'' := addNode(Nd, Nd'', TB')
    /\ NS' := (if size(TB) == size(TB') then empty else Nd' fi)
    /\ NS'' := (if size(TB') == size(TB'') then empty else Nd'' fi) .
    eq handleBetaF(Nd, NS, TB) = buildTableau*(Nd, NS, TB) [owise] . --- never reached

    --- handle state node
    op handleStateNode : Node NodeSet Tableau -> Tableau .
    ceq handleStateNode( { TS }, NS, TB) = buildTableau(union(NS', NS), TB')
    if Nd := { TS }
    /\ Nd' := next(Nd)
    /\ TB' := addNode(Nd, Nd', TB)
    /\ NS' := (if size(TB) == size(TB') then empty else Nd' fi) .

    --- add a node to the tableau
    op addNode : Node Node Tableau -> Tableau .
    --- for an existing node
    ceq addNode(Nd, Nd', { cnt: N, node2id: N2ID, id2node: ID2N })
    = { cnt: N, node2id: N2ID, id2node: ID2N' }
    if $hasMapping(N2ID, Nd') 
    /\ ID := N2ID[Nd]
    /\ ID' := N2ID[Nd'] 
    /\ ID2N' := insert(ID, addLeaf(ID2N[ID], ID'), ID2N) . --- add ID' as a leaf of node ID

    ceq addNode(Nd, Nd', { cnt: N, node2id: N2ID, id2node: ID2N }) 
    --- for a new node
    = { cnt: N + 1, node2id: N2ID', id2node: ID2N''}
    if not $hasMapping(N2ID, Nd')
    /\ ID := N2ID[Nd]
    /\ ID' := N
    /\ N2ID' := insert(Nd', ID', N2ID) --- add a new entry ID' |-> Nd'
    /\ ID2N' := insert(ID, addLeaf(ID2N[ID], ID'), ID2N) --- add node ID' as a leaf of node ID
    /\ ID2N'' := insert(ID', {node: Nd', type: getNodeType(Nd'), childs: empty}, ID2N') . --- add a new entry for node ID'
endfm

fmod STATE-FORMULAS is
    pr 2TUPLE{Term,NodeSet} * (op `(_`,_`) to `{_:_`},
        op p1_ to getState,
        op p2_ to getNodeSet,
        sort Tuple{Term,NodeSet} to State&Formulas) .
endfm

view SF from TRIV to STATE-FORMULAS is
    sort Elt to State&Formulas .
endv

fmod STATE-FORMULAS-SET is
    pr SET{SF} * (sort NeSet{SF} to NeSFSet, sort Set{SF} to SFSet, op empty : -> Set{SF} to emptySFS) .
    
    vars TS TS1 TS2 : TermSet .
    vars NS NS' : NodeSet .
    vars SFS : SFSet .
    vars T T' : Term .
    vars Nd : Node .

    --- simplify a set of states & formulas
    op simplifySFS : SFSet -> SFSet .
    eq simplifySFS(({T : {T' | TS1}}, {T : {T' | TS2}}, SFS)) 
    = simplifySFS(({T : {'True.TrueFormula | TS1}}, {T : {T' | TS2}}, SFS)) .
    eq simplifySFS(({T : {'True.TrueFormula}}, SFS)) = simplifySFS(SFS) .
    eq simplifySFS(({T : NS}, {T : (NS, NS')}, SFS)) = simplifySFS(({T : NS}, SFS)) .
    eq simplifySFS(SFS) = SFS [owise] .
endfm

fmod DB-CONFIG is
    pr STATE-FORMULAS-SET .
    pr CONVERSION .
    pr NAT-LIST .
    pr TABLEAU .
    pr LEXICAL .

    sorts DBConfig ResultType .

    ops satisfied unstatisfied unknown : -> ResultType [ctor] .

    op (current:_)      : Qid        -> DBConfig [ctor format (! o o)] .
    op (module:_)       : Module     -> DBConfig [ctor format (! o o)] .
    op (initState:_)    : Term       -> DBConfig [ctor format (! o o)] .
    op (formula:_)      : Term       -> DBConfig [ctor format (! o o)] .
    op (redInitState:_) : Term       -> DBConfig [ctor format (! o o)] .
    op (redFormula:_)   : Term       -> DBConfig [ctor format (! o o)] .
    op (atoms:_)        : TermSet    -> DBConfig [ctor format (! o o)] .
    op (depthList:_)    : NatList    -> DBConfig [ctor format (! o o)] .
    op (currentDepth:_) : Nat        -> DBConfig [ctor format (! o o)] .
    op (tableau:_)      : Tableau    -> DBConfig [ctor format (! o o)] .
    op (sfSet:_)        : SFSet      -> DBConfig [ctor format (! o o)] .
    op (result:_)       : ResultType -> DBConfig [ctor format (! o o)] .
endfm

view DBConfig from TRIV to DB-CONFIG is
    sort Elt to DBConfig .
endv

fmod CONFIG-SET is
    pr SET{DBConfig} * (
        sort NeSet{DBConfig} to NeDBConfigSet, 
        sort Set{DBConfig} to DBConfigSet, 
        op empty : -> Set{DBConfig} to emptyDBConfig) .
endfm

fmod DATABASE is
    pr CONFIG-SET .

    sort Database .

    vars RT RT' : ResultType .
    vars CFS : DBConfigSet .
    vars NL NL' : NatList .
    vars SFS SFS' : SFSet .
    vars CF : DBConfig .
    vars DB : Database .
    vars TS : TermSet .
    vars TB : Tableau .
    vars N N' : Nat .
    vars M : Module .
    vars QI : Qid .
    vars T : Term .

    op emptyDB : -> Database [ctor] .
    op {_} : DBConfigSet -> Database .
    
    --- is an empty database
    op isEmptyDB : Database -> Bool .
    eq isEmptyDB(emptyDB) = true .
    eq isEmptyDB(DB) = false [owise] .
    
    --- get information from a database
    op getCurrent      : Database -> Qid .
    op getModule       : Database -> Module .
    op getStateSort    : Database -> Type .
    op getInitState    : Database -> Term .
    op getFormula      : Database -> Term .
    op getRedInitState : Database -> Term .
    op getRedFormula   : Database -> Term .
    op getAtoms        : Database -> TermSet .
    op getDepthList    : Database -> NatList .
    op getCurrentDepth : Database -> Nat .
    op getTableau      : Database -> Tableau .
    op getSfSet        : Database -> SFSet .
    op getResult       : Database -> ResultType .
    
    eq getCurrent({(current: QI), CFS}) = QI .
    eq getModule({(module: M), CFS}) = M .
    eq getStateSort({(initState: T), CFS}) = getType(T) .
    eq getInitState({(initState: T), CFS}) = T .
    eq getFormula({(formula: T), CFS}) = T .
    eq getRedInitState({(redInitState: T), CFS}) = T .
    eq getRedFormula({(redFormula: T), CFS}) = T .
    eq getAtoms({(atoms: TS), CFS}) = TS .
    eq getDepthList({(depthList: NL), CFS}) = NL .
    eq getCurrentDepth({(currentDepth: N), CFS}) = N .
    eq getTableau({(tableau: TB), CFS}) = TB .
    eq getSfSet({(sfSet: SFS), CFS}) = SFS .
    eq getResult({(result: RT), CFS}) = RT .

    --- update the database
    op evalDB : Database DBConfigSet -> Database .
    eq evalDB(DB, (CF, CFS)) = evalDB(evalDB*(DB, CF), CFS) .
    eq evalDB(DB, emptyDBConfig) = DB .

    op evalDB* : Database DBConfig -> Database .
    eq evalDB*({(currentDepth: N), CFS}, (currentDepth: N')) = {(currentDepth: N'), CFS} .
    eq evalDB*({(depthList: NL), CFS}, (depthList: NL')) = {(depthList: NL'), CFS} .
    eq evalDB*({(sfSet: SFS), CFS}, (sfSet: SFS')) = {(sfSet: SFS'), CFS} .
    eq evalDB*({(result: RT), CFS}, (result: RT')) = {(result: RT'), CFS} .
endfm

fmod DATABASE-EXT is
    pr DATABASE .
    pr MAP{Nat,Nat} * ( sort Map{Nat,Nat} to NatToNat ) .
    
    vars N2N : NatToNat .
    vars NL : NatList .
    vars N N' : Nat .
    vars SFS : SFSet .
    vars T : Term .
    vars TS TS' : TermSet .
    vars NS : NodeSet .
    vars M : Module .

    --- for debugging
    op analyze  : SFSet          -> NatToNat .
    op analyze* : SFSet NatToNat -> NatToNat .
    eq analyze(SFS) = analyze*(SFS, empty) .
    ceq analyze*(({ T : NS }, SFS), N2N) =  if $hasMapping(N2N, N) then 
                                                analyze*(SFS, insert(N, N2N[N] + 1, N2N))
                                            else
                                                analyze*(SFS, insert(N, 1, N2N))
                                            fi
    if N := | NS | .
    eq analyze*(emptySFS, N2N) = N2N .

    op analyzeF : SFSet -> NodeSet .
    eq analyzeF(({ T : NS }, SFS)) = NS, analyzeF(SFS) .
    eq analyzeF(emptySFS) = empty .
    
    op qid : ResultType -> Type .
    eq qid(satisfied) = 'satisfied .
    eq qid(unstatisfied) = 'unstatisfied .
    eq qid(unknown) = 'unknown .

    op qid : Nat -> Qid .
    eq qid(N) = tokenize(string(N, 10)) .

    op qid : NatList -> QidList .
    eq qid(N NL) = qid(N) qid(NL) .
    eq qid((nil).NatList) = nil .

    op qid : NatToNat -> QidList .
    eq qid((N |-> N', N2N)) = qid(N) '-> qid(N') '\s .
    eq qid((empty).NatToNat) = nil .

    op qid : Module NodeSet         -> QidList .
    op qid : Module NodeSet TermSet -> QidList .
    eq qid(M, NS) = qid(M, NS, emptyTermSet) .
    eq qid(M, ({ TS }, NS), TS') = qid(M, NS, TS | TS') .
    eq qid(M, (empty).NodeSet, TS') = qid(M, TS') .
    
    op qid : Module TermSet -> QidList .
    eq qid(M, T | TS) = metaPrettyPrint(M, T, none) '\n '\t '\o '\t qid(M, TS) .
    eq qid(M, emptyTermSet) = nil .
endfm