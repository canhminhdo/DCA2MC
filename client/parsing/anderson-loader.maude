load ../../specs/anderson.maude
load ../../full-maude-lite.maude
load ../../database.maude

mod ANDERSON-DB is
    pr ANDERSON .
    pr DATABASE-JSON .

    --- op sf : -> State&Formulas .
    --- eq sf = { '`{_`} ['__ ['cnt:_ ['s_ ['0.Zero ]],'next:_ ['0.Zero ],'array`[_`]:_ ['0.Zero ,'false.Bool ],'array`[_`]:_ ['s_ ['0.Zero ],'true.Bool ],'pc`[_`]:_ ['p1.Pid ,'fs.Loc ],'pc`[_`]:_ ['p2.Pid ,'ws.Loc ],'place`[_`]:_ ['p1.Pid ,'0.Zero ],'place`[_`]:_ ['p2.Pid ,'s_ ['0.Zero ]]]]: [{ '_R_ ['False.FalseFormula ,'_\/_ ['~_ ['inWs1.Prop ],'_U_ ['True.TrueFormula ,'inCs1.Prop ]]]}]} .

    var OCs : Soup{OComp} .
    var TS : TermSet .
    var N :  Nat .
    var I : Pid .
    var L : Loc .
    var B : Bool .

    op errState : -> Config .
    
    op getNext : Config -> Nat .
    eq getNext({(next: N) OCs}) = N .

    op getPlace : Config Pid -> Nat .
    eq getPlace({(place[I]: N) OCs}, I) = N .
    
    op getArray : Config Nat -> Bool .
    eq getArray({(array[N]: B) OCs}, N) = B .
    
    op getLoc : Config Pid -> Loc .
    eq getLoc({(pc[I]: L) OCs}, I) = L .
    
    op getCnt : Config -> Nat .
    eq getCnt({(cnt: N) OCs}) = N .
endm

eof

red sf .
red getState(sf) .
red getAndFormulas(sf) .
red downTerm(getState(sf), errState) .
red getNext(downTerm(getState(sf), errState)) .
red getPlace(downTerm(getState(sf), errState), p1) .
red getPlace(downTerm(getState(sf), errState), p2) .
red getArray(downTerm(getState(sf), errState), 0) .
red getArray(downTerm(getState(sf), errState), 1) .
red init .
red AFL2Json(getAndFormulas(sf)) .